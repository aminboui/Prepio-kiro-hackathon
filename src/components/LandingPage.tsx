"use client"

import type React from "react"
import { useMemo, useState, useEffect, useRef } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Zap,
  Code,
  Target,
  TrendingUp,
  Brain,
  CheckCircle,
  ArrowRight,
  Sparkles,
  Users,
  Clock,
  Award,
  Shield,
  Gauge,
  ChevronRight,
  TerminalSquare,
  Braces,
  Bug,
  Cpu,
  GitBranch,
  Database,
  CircuitBoard,
  Code2,
  Terminal,
  User,
  LogIn,
  MessageSquare,
  FileText,
  Briefcase,
} from "lucide-react"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { getCurrentUser } from "@/lib/supabase"
import InterviewPrepSection from "@/components/interview-prep-section"

interface LandingPageProps {
  onGetStarted?: () => void
}

export default function LandingPage({
  onGetStarted = () => alert("Let’s go! Launching your first AI-powered challenge..."),
}: LandingPageProps) {
  // Authentication state
  const [user, setUser] = useState<any>(null)
  const [isLoadingAuth, setIsLoadingAuth] = useState(true)

  useEffect(() => {
    // Check authentication status
    const checkAuth = async () => {
      try {
        const currentUser = await getCurrentUser()
        setUser(currentUser)
      } catch (error) {
        console.error('Error checking auth:', error)
      } finally {
        setIsLoadingAuth(false)
      }
    }

    checkAuth()
  }, [])

  // Data
  const features = [
    {
      icon: Brain,
      title: "AI-Powered Challenges",
      description: "Get unique, personalized coding challenges generated by advanced AI tailored to your skill level.",
    },
    {
      icon: Target,
      title: "Instant Feedback",
      description:
        "Receive detailed analysis on correctness, efficiency, and code quality with actionable suggestions.",
    },
    {
      icon: Code,
      title: "Professional Editor",
      description: "Code in a VS Code-like environment with syntax highlighting and intelligent features.",
    },
    {
      icon: TrendingUp,
      title: "Skill Progression",
      description: "Track your improvement over time with detailed analytics and personalized learning paths.",
    },
  ]

  const languages = ["JavaScript", "TypeScript", "Python", "Java", "C++", "C#", "Go", "Rust", "PHP", "Ruby"]

  const testimonials = [
    {
      name: "Sarah Chen",
      role: "Frontend Developer",
      content:
        "Prepio helped me identify gaps in my JavaScript knowledge I never knew existed. The AI feedback is incredibly detailed.",
    },
    {
      name: "Marcus Rodriguez",
      role: "Software Engineer",
      content:
        "The personalized challenges are perfect for interview prep. I improved my problem-solving skills significantly.",
    },
    {
      name: "Emily Johnson",
      role: "CS Student",
      content:
        "As a beginner, the hints and explanations helped me understand not just what to fix, but why. Game changer!",
    },
  ]

  // Hero "AI Test" live demo state
  const [analyzing, setAnalyzing] = useState(false)
  const [result, setResult] = useState<null | "pass" | "fail">(null)

  const runTest = () => {
    setAnalyzing(true)
    setResult(null)
    setTimeout(() => {
      const outcomes: Array<"pass" | "fail"> = ["pass", "pass", "fail", "pass"]
      const pick = outcomes[Math.floor(Math.random() * outcomes.length)]
      setResult(pick)
      setAnalyzing(false)
    }, 1200)
  }

  // Hero sample (quick sanity — not palindrome)
  const codeSampleHero = useMemo(
    () => [
      "function isKiro(s) {",
      "  // Sanity check for 'kiro'",
      "  const clean = s.toLowerCase();",
      "  const result = clean.includes('kiro');",
      "  console.log(result ? '✅ Welcome to the Kiro Hackathon!' : '❌ Not Kiro material...');",
      "  return result;",
      "}",
      "",
      "console.log(isKiro('Kiro Hackathon')); // true",
    ],
    [],
  )

  // Deep-dive tabs (non-palindrome)
  const [tab, setTab] = useState<"correctness" | "complexity" | "security">("correctness")

  const codeByTab: Record<typeof tab, string[]> = useMemo(
    () => ({
      correctness: [
        "function twoSum(nums, target) {",
        "  const map = new Map();",
        "  for (let i = 0; i < nums.length; i++) {",
        "    const need = target - nums[i];",
        "    if (map.has(need)) return [map.get(need), i];",
        "    map.set(nums[i], i);",
        "  }",
        "  return null; // not found",
        "}",
        "",
        "console.log(twoSum([2,7,11,15], 9)); // [0,1]",
      ],
      complexity: [
        "function fib(n) {",
        "  if (n <= 1) return n;",
        "  return fib(n - 1) + fib(n - 2); // exponential",
        "}",
        "",
        "function fibMemo(n, memo = {}) {",
        "  if (n in memo) return memo[n];",
        "  if (n <= 1) return n;",
        "  memo[n] = fibMemo(n - 1, memo) + fibMemo(n - 2, memo);",
        "  return memo[n]; // linear",
        "}",
        "",
        "console.log(fibMemo(10)); // 55",
      ],
      security: [
        "function sanitize(input) {",
        "  const el = document.createElement('div');",
        "  el.innerText = String(input);",
        "  return el.innerHTML; // basic XSS mitigation",
        "}",
        "",
        "const payload = \"<img src=x onerror=alert('xss')>\";",
        "console.log(sanitize(payload));",
      ],
    }),
    [],
  )

  const titleByTab: Record<typeof tab, string> = {
    correctness: "Two Sum Validator",
    complexity: "Fibonacci Complexity Probe",
    security: "XSS Sanitizer Audit",
  }

  const descByTab: Record<typeof tab, string> = {
    correctness: "The evaluator verifies functional correctness across edge cases and random inputs.",
    complexity: "We estimate algorithmic complexity and suggest tradeoffs when the curve spikes.",
    security: "Static heuristics and runtime checks catch dangerous sinks and injection vectors.",
  }

  // Hero spotlight tracking
  const heroRef = useRef<HTMLDivElement | null>(null)
  const onHeroMouseMove = (e: React.MouseEvent) => {
    const el = heroRef.current
    if (!el) return
    const rect = el.getBoundingClientRect()
    const x = e.clientX - rect.left
    const y = e.clientY - rect.top
    el.style.setProperty("--mx", `${x}px`)
    el.style.setProperty("--my", `${y}px`)
  }

  return (
    <main className="min-h-screen bg-background text-foreground">
      <NavBar onGetStarted={onGetStarted} user={user} isLoadingAuth={isLoadingAuth} />

      {/* Hero */}
      <section id="home" className="relative overflow-hidden" ref={heroRef} onMouseMove={onHeroMouseMove}>
        {/* Soft gradient wash */}
        <div className="absolute inset-0 bg-gradient-to-br from-gray-900/20 via-background to-background" />

        {/* Grid and decorative */}
        <GridBackground className="opacity-75" />
        <Orb className="left-[-50px] top-[-70px] h-44 w-44 opacity-90" />
        <Orb className="right-[-70px] bottom-[-70px] h-56 w-56 opacity-50" />

        {/* Animated radial glows (unchanged theme) */}
        <div className="pointer-events-none absolute -bottom-24 -left-24 h-72 w-72 rounded-full bg-[radial-gradient(closest-side,rgba(234,88,12,0.25),transparent_70%)] blur-2xl" />
        <div className="pointer-events-none absolute -bottom-16 -right-16 h-64 w-64 rounded-full bg-[radial-gradient(closest-side,rgba(234,88,12,0.2),transparent_70%)] blur-2xl" />



        {/* NEW: Interactive cursor spotlight */}
        <HeroSpotlight />

        {/* NEW: Scanning line for “AI analyzing” vibe */}
        <Scanline />

        {/* NEW: Floating coding icons background */}
        <CodeIconField />

        <div className="relative container mx-auto px-4 pb-20 pt-20 md:pt-36">
          <div className="mx-auto grid max-w-6xl items-center gap-12 lg:grid-cols-[1.15fr_.85fr]">
            {/* Left */}
            <div className="space-y-8 text-center lg:text-left">
              <div className="mx-auto flex items-center justify-center space-x-2 lg:mx-0">
                <Zap className="h-8 w-8 text-gray-400" />
                <span className="text-base font-medium text-gray-400/90">AI Code Tester</span>
              </div>

              <h1 className="text-4xl text-gray-300 font-extrabold leading-tight tracking-tight md:text-6xl">
                Your AI-Powered Coding Mentor &
                <span className="relative block bg-gradient-to-r from-gray-300 to-gray-600 bg-clip-text text-transparent leading-tight">
                  <span className="shine-text">Interview Coach</span>
                </span>
              </h1>

              <p className="mx-auto max-w-2xl text-lg text-muted-foreground md:text-xl lg:mx-0">
                Tackle personalized coding challenges, simulate real interview rounds, and get instant AI-powered feedback that accelerates both your skills and your career.
              </p>

              <div className="flex flex-col justify-center gap-4 sm:flex-row lg:justify-start">
                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <Button
                    size="lg"
                    variant="outline"
                    className="group relative px-8 py-6 text-lg border-2 border-gray text-gray-300 hover:bg-neutral-950 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)]
             after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-1/3 after:h-[2px] after:bg-gradient-to-r after:from-transparent after:via-white/70 after:to-transparent after:rounded-full after:blur-[2px] after:opacity-70 group-hover:after:opacity-100 after:transition"
                    asChild
                  >
                    <Link href="/practice">
                      <Sparkles className="mr-2 h-5 w-5 transition-transform group-hover:scale-110" />
                      Practice Mode
                      <ArrowRight className="ml-2 h-5 w-5 transition-transform group-hover:translate-x-0.5" />
                    </Link>
                  </Button>
                  <Button
                    size="lg"
                    variant="outline"
                    className="group relative px-8 py-6 text-lg border-2 border-gray text-gray-300 hover:bg-neutral-950 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)]
             after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-1/3 after:h-[2px] after:bg-gradient-to-r after:from-transparent after:via-white/70 after:to-transparent after:rounded-full after:blur-[2px] after:opacity-70 group-hover:after:opacity-100 after:transition"
                    asChild
                  >
                    <Link href="/interview-prep">
                      <Target className="mr-2 h-5 w-5 transition-transform group-hover:scale-110" />
                      Interview Prep Mode
                      <ArrowRight className="ml-2 h-5 w-5 transition-transform group-hover:translate-x-0.5" />
                    </Link>
                  </Button>
                </div>
              </div>

              <div className="mx-auto flex max-w-2xl flex-wrap items-center justify-center gap-4 lg:mx-0">
                <TrustPill icon={<CheckCircle className="mr-2 h-3.5 w-3.5 text-gray-400" />}>
                  Precise AI analysis
                </TrustPill>
                <TrustPill icon={<Clock className="mr-2 h-3.5 w-3.5 text-gray-400" />}>Feedback in ~5.2s</TrustPill>
                <TrustPill icon={<Award className="mr-2 h-3.5 w-3.5 text-gray-400" />}>98% pass detection</TrustPill>
              </div>
            </div>

            {/* Right demo */}
            <DemoCard
              id="demo"
              title="Kiro Hackathon Sanity Check"
              description="Quick check to confirm you’re truly in Kiro territory before the AI flexes its brain."
              codeSample={codeSampleHero}
              analyzing={analyzing}
              result={result}
              onRun={runTest}
              onReset={() => setResult(null)}
            />
          </div>
        </div>
      </section>

      {/* Brands Marquee */}
      <section className="relative border-y border-border/60 bg-card/40 py-6">
        <GridBackground className="opacity-15" />
        <div className="container mx-auto px-4">
          <div className="relative overflow-hidden">
            <div className="animate-marquee whitespace-nowrap text-muted-foreground/80">
              {[
                "JavaScript",
                "Python",
                "TypeScript",
                "Java",
                "Go",
                "Rust",
                "C++",
                "C#",
                "Ruby",
                "PHP",
                "Swift",
                "Kotlin",
              ].map((b, i) => (
                <span key={i} className="mx-6 inline-flex items-center gap-2 text-sm">
                  <TerminalSquare className="h-4 w-4 text-gray-400" />
                  {b}
                </span>
              ))}
              {[
                "JavaScript",
                "Python",
                "TypeScript",
                "Java",
                "Go",
                "Rust",
                "C++",
                "C#",
                "Ruby",
                "PHP",
                "Swift",
                "Kotlin",
              ].map((b, i) => (
                <span key={`ghost-${i}`} className="mx-6 inline-flex items-center gap-2 text-sm">
                  <TerminalSquare className="h-4 w-4 text-gray-400" />
                  {b}
                </span>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Features */}
      <section id="features" className="relative overflow-hidden bg-card/50 py-20">
        <GridBackground className="opacity-30 [mask-image:radial-gradient(ellipse_at_center,white,transparent_75%)]" />
        <CodeBackdrop className="opacity-[0.08]" />
        <Orb className="left-[-80px] top-[-80px] h-40 w-40 opacity-40" />
        <Orb className="right-[-60px] bottom-[-60px] h-48 w-48 opacity-30" />

        <div className="container relative mx-auto px-4">
          <SectionHeading
            eyebrow="Capabilities"
            title="Why Developers Choose PrepioAI"
            subtitle="Experience the future of coding education with AI personalization and instant insights."
          />

          <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-4">
            {features.map((feature, index) => {
              const Icon = feature.icon
              return (
                <Card
                  key={index}
                  className="group relative border-border/60 transition-all duration-300 hover:-translate-y-0.5 hover:border-gray-600/50 hover:shadow-[0_10px_30px_-10px_rgba(156,163,175,0.25)]"
                >
                  <div className="absolute -inset-px -z-10 rounded-xl opacity-0 blur-lg transition-opacity duration-300 group-hover:opacity-100 [background:linear-gradient(180deg,rgba(156,163,175,0.15),transparent_35%)]" />
                  <CardHeader>
                    <div className="mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-gray-900/40">
                      <Icon className="h-6 w-6 text-gray-400" />
                    </div>
                    <CardTitle className="text-xl">{feature.title}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <CardDescription className="text-base leading-relaxed">{feature.description}</CardDescription>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </div>
      </section>

      {/* Deep Dive Tabs */}
      <section id="deep-dive" className="relative overflow-hidden py-20">
        <GridBackground className="opacity-25 [mask-image:radial-gradient(ellipse_at_center,white,transparent_70%)]" />
        <CodeBackdrop className="rotate-1 opacity-[0.06]" codeSet="mixed" />
        <Orb className="left-[10%] top-[-50px] h-32 w-32 opacity-30" />
        <Orb className="right-[15%] bottom-[-70px] h-44 w-44 opacity-25" />

        <div className="container relative mx-auto px-4">
          <SectionHeading
            eyebrow="Under the hood"
            title="How our AI evaluates your code"
            subtitle="A multi-signal evaluator looks at correctness, complexity, and security simultaneously."
          />

          <div className="grid gap-8 lg:grid-cols-2">
            <div className="space-y-6">
              <TabSwitch
                current={tab}
                onChange={setTab}
                tabs={[
                  { key: "correctness", label: "Correctness", icon: CheckCircle },
                  { key: "complexity", label: "Complexity", icon: Gauge },
                  { key: "security", label: "Security", icon: Shield },
                ]}
              />

              <Card className="border-border/60 bg-card/70 backdrop-blur">
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">AI Review</CardTitle>
                  <CardDescription>Live preview of the evaluator commentary.</CardDescription>
                </CardHeader>
                <CardContent>
                  {tab === "correctness" && (
                    <ul className="space-y-2 list-disc pl-5 text-sm text-muted-foreground">
                      <li>Finds valid pair indices across duplicates and negatives.</li>
                      <li>Randomized fuzz tests confirm stability and determinism.</li>
                      <li>Graceful handling when no valid pair exists.</li>
                    </ul>
                  )}
                  {tab === "complexity" && (
                    <ul className="space-y-2 list-disc pl-5 text-sm text-muted-foreground">
                      <li>Recursive version is O(2^n); memoized variant reduces to O(n).</li>
                      <li>Stack depth considerations flagged for large n without memoization.</li>
                      <li>Recommends iterative DP for predictable memory footprint.</li>
                    </ul>
                  )}
                  {tab === "security" && (
                    <ul className="space-y-2 list-disc pl-5 text-sm text-muted-foreground">
                      <li>Encodes user input to neutralize HTML injection vectors.</li>
                      <li>Advises CSP and output encoding for templated contexts.</li>
                      <li>Suggests keeping sanitizer small and auditable.</li>
                    </ul>
                  )}
                </CardContent>
              </Card>
            </div>

            <DemoCard
              codeSample={codeByTab[tab]}
              analyzing={analyzing}
              result={result}
              onRun={runTest}
              onReset={() => setResult(null)}
              compact
              title={titleByTab[tab]}
              description={descByTab[tab]}
            />
          </div>
        </div>
      </section>

      {/* Skill Builder (animated) */}
      <section id="skill" className="relative overflow-hidden bg-card/50 py-20">
        <div className="pointer-events-none absolute inset-0 bg-gradient-to-r from-gray-900/10 via-transparent to-gray-800/10" />
        <GridBackground className="opacity-25 [mask-image:radial-gradient(ellipse_at_center,white,transparent_70%)]" />
        <CodeBackdrop className="opacity-[0.05]" codeSet="snippets" />
        <Orb className="left-[6%] top-[-60px] h-40 w-40 opacity-25" />
        <Orb className="right-[8%] bottom-[-60px] h-48 w-48 opacity-20" />

        <div className="container relative mx-auto px-4">
          <SectionHeading
            eyebrow="Sharpen your skills"
            title="Practice that feels like real work"
            subtitle="Quick challenges, adversarial edge cases, and instant coaching that grows with you."
          />
          <div className="grid gap-8 lg:grid-cols-[1.1fr_.9fr]">
            <CodeAnimation />

            <div className="grid gap-6 sm:grid-cols-2">
              <SkillCard
                icon={<Target className="h-6 w-6 text-gray-400" />}
                title="Targeted Fix Challenges"
                desc="Small, surgical bugs that build precision and pattern recognition."
              />
              <SkillCard
                icon={<TrendingUp className="h-6 w-6 text-gray-400" />}
                title="Efficiency Mastery"
                desc="Learn to spot hot paths and reduce complexity with guided tips."
              />
              <SkillCard
                icon={<Shield className="h-6 w-6 text-gray-400" />}
                title="Secure by Design"
                desc="Identify injection sinks, unsafe APIs, and fix them fast."
              />
              <SkillCard
                icon={<Code className="h-6 w-6 text-gray-400" />}
                title="Clean Code Coaching"
                desc="Readable, maintainable solutions with feedback that sticks."
              />
              <SkillCard
                icon={<Sparkles className="h-6 w-6 text-gray-400" />}
                title="AI Mentorship"
                desc="Actionable suggestions, not just scores so you improve every attempt."
              />
              <SkillCard
                icon={<CheckCircle className="h-6 w-6 text-gray-400" />}
                title="Interview Ready"
                desc="From quick fixes to reasoning practice that maps to real interviews."
              />
            </div>
          </div>
        </div>
      </section>

      {/* Interview-Prep */}
      <InterviewPrepSection />

      {/* Testimonials */}
      <section id="testimonials" className="relative overflow-hidden py-20">
        <GridBackground className="opacity-20 [mask-image:radial-gradient(ellipse_at_center,white,transparent_70%)]" />
        <CodeBackdrop className="opacity-[0.06] -rotate-1" codeSet="snippets" />

        <div className="container relative mx-auto px-4">
          <SectionHeading
            eyebrow="Social proof"
            title="What developers say"
            subtitle="Join thousands of developers improving their skills with AI-powered challenges."
          />

          <div className="grid gap-8 md:grid-cols-3">
            {testimonials.map((testimonial, index) => (
              <Card
                key={index}
                className="border-border/60 transition-all duration-300 hover:-translate-y-0.5 hover:border-gray-600/50"
              >
                <CardContent className="pt-6">
                  <div className="space-y-4">
                    <p className="italic text-muted-foreground">
                      {'"'}
                      {testimonial.content}
                      {'"'}
                    </p>
                    <div className="flex items-center space-x-3">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gray-900/40">
                        <Users className="h-5 w-5 text-gray-400" />
                      </div>
                      <div>
                        <div className="font-semibold">{testimonial.name}</div>
                        <div className="text-sm text-muted-foreground">{testimonial.role}</div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        <Chip className="hidden md:flex left-8 top-10">{"// AI review: looks great!"}</Chip>
        <Chip className="hidden md:flex right-8 bottom-10">{"/* complexity: O(n) */"}</Chip>
      </section>

      {/* FAQ */}
      <section id="faq" className="relative overflow-hidden bg-card/50 py-20">
        <GridBackground className="opacity-20 [mask-image:radial-gradient(ellipse_at_center,white,transparent_70%)]" />
        <CodeBackdrop className="opacity-[0.05]" />

        <div className="container relative mx-auto px-4">
          <SectionHeading eyebrow="FAQ" title="Questions? We’ve got answers." />
          <div className="mx-auto max-w-3xl">
            <Accordion type="single" collapsible className="w-full">
              <AccordionItem value="item-1">
                <AccordionTrigger>How does the AI generate challenges?</AccordionTrigger>
                <AccordionContent>
                  The AI generates challenges based on the preferences and skill level you select, tailoring each task to match your coding background.
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="item-2">
                <AccordionTrigger>Do I need prior experience?</AccordionTrigger>
                <AccordionContent>
                  Not at all. PrepioAI adapts to beginners, intermediates, and advanced developers alike.
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="item-3">
                <AccordionTrigger>Which languages are supported?</AccordionTrigger>
                <AccordionContent>
                  JavaScript, TypeScript, Python, Java, C++, C#, Go, Rust, PHP, and Ruby—with more on the way.
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </div>
        </div>
      </section>

      {/* Final CTA */}
      <section id="get-started" className="relative overflow-hidden py-20">
        <div className="pointer-events-none absolute" />
        <GridBackground className="opacity-60 [mask-image:radial-gradient(ellipse_at_center,white,transparent_90%)] [&>*]:stroke-blue-800 [&>*]:drop-shadow-[0_0_8px_rgba(59,130,246,0.6)] [&>*]:filter" />
        <CodeBackdrop className="opacity-[0.05]" />
        <Orb className="left-[5%] top-[-60px] h-40 w-40 opacity-25" />
        <Orb className="right-[8%] bottom-[-60px] h-48 w-48 opacity-20" />

        <div className="container relative mx-auto px-4 text-center">
          <div className="mx-auto max-w-3xl space-y-8">
            <h3 className="text-3xl font-bold md:text-4xl">Ready to level up your coding skills?</h3>
            <p className="text-xl text-muted-foreground">
              Start your first AI-powered challenge and get instant feedback no setup required.
            </p>
            <div className="flex flex-col justify-center gap-4 sm:flex-row">
              <Button size="lg" className="group relative px-8 py-6 text-lg border-2 border-gray text-gray-300 hover:bg-orange-700 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)] after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-1/3 after:h-[2px] after:bg-gradient-to-r after:from-transparent after:via-white/70 after:to-transparent after:rounded-full after:blur-[2px] after:opacity-70 group-hover:after:opacity-100 after:transition" asChild>
                <Link href="/practice">
                  <Zap className="mr-2 h-5 w-5" />
                  Practice Mode
                </Link>
              </Button>
              <a href="/mode-selection" className="inline-flex">
                <Button variant="outline" size="lg" className="group relative px-8 py-6 text-lg border-2 border-gray text-gray-300 hover:bg-neutral-950 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)] after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-1/3 after:h-[2px] after:bg-gradient-to-r after:from-transparent after:via-white/70 after:to-transparent after:rounded-full after:blur-[2px] after:opacity-70 group-hover:after:opacity-100 after:transition">
                  Explore Features
                </Button>
              </a>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="border-t border-border py-12">
        <div className="container mx-auto px-4">
          <div className="flex flex-col items-center justify-between gap-6 md:flex-row">
            {/* Logo */}
          <div className="flex items-center space-x-2">
            <a href="/" className="flex items-center gap-2">
            <span className="flex h-8 w-8 items-center justify-center rounded-md text-primary font-bold text-lg">
              {`{P}`}
            </span>
            <span className="text-xl font-bold text-foreground">Prepio</span>
            </a>
          </div>
            <nav className="flex gap-6 text-sm text-muted-foreground">
              <a className="hover:text-foreground" href="#features">
                Features
              </a>
              <a className="hover:text-foreground" href="#deep-dive">
                How it works
              </a>
              <a className="hover:text-foreground" href="#skill">
                Skill Builder
              </a>
              <a className="hover:text-foreground" href="#faq">
                FAQ
              </a>
            </nav>
            <div className="text-muted-foreground">
              {"\u00A9"} 2025 PrepioAI. Empowering developers with AI-powered learning. Made by Kiro.
            </div>
          </div>
        </div>
      </footer>

      {/* Sticky Bottom CTA */}
      <div className="fixed inset-x-0 bottom-3 z-50 px-3">
        <div className="mx-auto max-w-3xl rounded-xl border border-border bg-card/80 px-4 py-3 shadow-lg backdrop-blur">
          <div className="flex items-center gap-3">
            <Sparkles className="h-5 w-5 text-gray-400" />
            <div className="flex-1 text-sm">
              <span className="font-medium">Ready when you are.</span> Get instant AI feedback on your first challenge.
            </div>
            <Button size="sm" className="group relative px-6 py-3 border-2 border-gray text-gray-300 hover:bg-orange-700 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)] after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-1/3 after:h-[2px] after:bg-gradient-to-r after:from-transparent after:via-white/70 after:to-transparent after:rounded-full after:blur-[2px] after:opacity-70 group-hover:after:opacity-100 after:transition" onClick={onGetStarted}>
              Get Started <ChevronRight className="ml-1 h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Local styles */}
      <style jsx>{`
        @keyframes spin {
          to {
            transform: rotate(360deg);
          }
        }
        @keyframes marquee {
          0% {
            transform: translateX(0);
          }
          100% {
            transform: translateX(-50%);
          }
        }
        .animate-marquee {
          display: inline-block;
          min-width: 200%;
          animation: marquee 28s linear infinite;
        }
        @keyframes caret {
          0%,
          45% {
            opacity: 1;
          }
          50%,
          95% {
            opacity: 0;
          }
          100% {
            opacity: 1;
          }
        }

        /* HERO enhancements */
        .shine-text {
          background-image: linear-gradient(
            110deg,
            rgba(255, 255, 255, 0) 0%,
            rgba(255, 255, 255, 0.18) 45%,
            rgba(255, 255, 255, 0.6) 50%,
            rgba(255, 255, 255, 0.18) 55%,
            rgba(255, 255, 255, 0) 100%
          );
          background-size: 250% 100%;
          background-repeat: no-repeat;
          -webkit-background-clip: text;
          background-clip: text;
          animation: shine 3.2s ease-in-out infinite;
        }
        @keyframes shine {
          0% {
            background-position: 200% 0%;
          }
          100% {
            background-position: -50% 0%;
          }
        }

        .hero-spotlight {
          position: absolute;
          inset: 0;
          pointer-events: none;
          background: radial-gradient(
              240px 240px at var(--mx, 50%) var(--my, 40%),
              rgba(var(--primary-rgb, 59, 130, 246), 0.16),
              transparent 60%
            ),
            radial-gradient(
              440px 440px at var(--mx, 50%) var(--my, 40%),
              rgba(var(--primary-rgb, 59, 130, 246), 0.08),
              transparent 60%
            );
          mix-blend-mode: screen;
        }

        /* Floating icon field */
        @keyframes floatY {
          0% {
            transform: translateY(-6px);
          }
          100% {
            transform: translateY(6px);
          }
        }
        @keyframes driftX {
          0% {
            transform: translateX(-6px) rotate(var(--rot, 0deg));
          }
          100% {
            transform: translateX(6px) rotate(var(--rot, 0deg));
          }
        }
        @keyframes twinkle {
          0%,
          100% {
            opacity: var(--op, 0.4);
          }
          50% {
            opacity: calc(var(--op, 0.4) + 0.25);
          }
        }

        /* Scanline */
        @keyframes scan {
          0% {
            transform: translateY(-100%);
          }
          100% {
            transform: translateY(200%);
          }
        }
        .scanline {
          position: absolute;
          left: 0;
          right: 0;
          height: 140px;
          background: linear-gradient(
            to bottom,
            rgba(255, 255, 255, 0) 0%,
            rgba(255, 255, 255, 0.08) 40%,
            rgba(255, 255, 255, 0.15) 50%,
            rgba(255, 255, 255, 0.08) 60%,
            rgba(255, 255, 255, 0) 100%
          );
          mix-blend-mode: overlay;
          filter: blur(0.3px);
          animation: scan 7.5s linear infinite;
          pointer-events: none;
        }
      `}</style>
    </main>
  )
}

/* ---------- Top nav ---------- */
function NavBar({ onGetStarted, user, isLoadingAuth }: { onGetStarted: () => void; user: any; isLoadingAuth: boolean }) {
  return (
    <header className="fixed inset-x-0 top-0 z-50">
      <div className="mx-auto max-w-7xl px-4">
        <div className="mt-3 flex items-center justify-between rounded-xl border border-border/60 bg-card/70 px-4 py-2.5 backdrop-blur">
          <a href="/" className="flex items-center gap-2">
            {/* Logo */}
          <div className="flex items-center space-x-2">
            <span className="flex h-8 w-8 items-center justify-center rounded-md text-primary font-bold text-lg">
              {`{P}`}
            </span>
            <span className="text-xl font-bold text-foreground">Prepio</span>
          </div>
          </a>
          <nav className="hidden items-center gap-6 text-sm text-muted-foreground md:flex">
            <a className="hover:text-foreground" href="#features">
              Features
            </a>
            <a className="hover:text-foreground" href="#deep-dive">
              How it works
            </a>
            <a className="hover:text-foreground" href="#skill">
              Skill Builder
            </a>
            <a className="hover:text-foreground" href="#faq">
              FAQ
            </a>
          </nav>
          <div className="flex items-center gap-2">
            {!isLoadingAuth && (
              <>
                {user ? (
                  // Authenticated user - show Profile button
                  <Button variant="outline" size="sm" asChild className="group relative px-4 py-2 border-2 border-gray text-gray-300 hover:bg-neutral-950 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)]">
                    <Link href="/profile">
                      Profile
                    </Link>
                  </Button>
                ) : (
                  // Guest user - show Sign In button
                  <Button variant="outline" size="sm" asChild className="group relative px-4 py-2 border-2 border-gray text-gray-300 hover:bg-neutral-950 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)]">
                    <Link href="/auth/signin">
                      Sign In
                    </Link>
                  </Button>
                )}
              </>
            )}
            <Button size="sm" className="group relative px-4 py-2 border-2 border-gray text-gray-300 hover:bg-orange-700 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)] after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-1/3 after:h-[2px] after:bg-gradient-to-r after:from-transparent after:via-white/70 after:to-transparent after:rounded-full after:blur-[2px] after:opacity-70 group-hover:after:opacity-100 after:transition" onClick={onGetStarted}>
              Get Started
            </Button>
          </div>
        </div>
      </div>
    </header>
  )
}

/* ---------- Hero / Deep-dive Demo Card ---------- */
function DemoCard({
  codeSample,
  analyzing,
  result,
  onRun,
  onReset,
  id,
  compact,
  title = "AI Test",
  description = "The AI evaluates correctness, complexity, and edge-cases.",
}: {
  codeSample: string[]
  analyzing: boolean
  result: null | "pass" | "fail"
  onRun: () => void
  onReset: () => void
  id?: string
  compact?: boolean
  title?: string
  description?: string
}) {
  return (
    <div id={id} className="relative">
      <div className="absolute -inset-0.5 rounded-2xl opacity-60 blur-2xl [background:conic-gradient(from_180deg_at_50%_50%,hsl(var(--primary)/.45),transparent_40%,hsl(var(--primary)/.35),transparent_70%)]" />
      <Card className="relative overflow-hidden border-border/60 bg-card/80 shadow-xl backdrop-blur">
        <div className="absolute right-3 top-3 z-10">
          <Badge className="bg-gray-900/40 text-gray-400 hover:bg-gray-800/60">
            <Sparkles className="mr-1.5 h-3.5 w-3.5" />
            AI Test
          </Badge>
        </div>
        <CardHeader className={compact ? "pb-1" : "pb-3"}>
          <CardTitle className="text-lg">{title}</CardTitle>
          <CardDescription>{description}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="rounded-lg border border-border/60 bg-gradient-to-b from-background/60 to-background p-0.5">
            <div className="flex items-center gap-2 border-b border-border/60 px-3 py-2">
              <span className="inline-block size-2.5 rounded-full bg-red-400/90" />
              <span className="inline-block size-2.5 rounded-full bg-yellow-400/90" />
              <span className="inline-block size-2.5 rounded-full bg-green-400/90" />
              <span className="ml-2 text-xs text-muted-foreground">main.ts</span>
            </div>
            <div className="grid grid-cols-[auto_1fr] gap-x-4 px-4 py-4">
              <div className="select-none text-right text-xs leading-6 text-muted-foreground/70">
                {codeSample.map((_, i) => (
                  <div key={i}>{i + 1}</div>
                ))}
              </div>
              <pre className="overflow-x-auto text-sm leading-6">
                <code className="font-mono">
                  {codeSample.map((line, i) => (
                    <div key={i} className={i === 2 || i === 4 ? "rounded bg-gray-900/40 px-2 text-gray-400" : ""}>
                      {line}
                    </div>
                  ))}
                </code>
              </pre>
            </div>
          </div>

          <div className="flex flex-col items-stretch justify-between gap-3 sm:flex-row sm:items-center">
            <div className="min-h-[24px] text-sm" aria-live="polite" aria-atomic="true">
              {analyzing && (
                <span className="inline-flex items-center text-muted-foreground">
                  <Sparkles className="mr-2 h-4 w-4 animate-pulse text-primary" />
                  Analyzing code…
                </span>
              )}
              {!analyzing && result === "pass" && (
                <span className="inline-flex items-center text-emerald-500">
                  <CheckCircle className="mr-2 h-4 w-4" />
                  Tests passed. Looks solid.
                </span>
              )}
              {!analyzing && result === "fail" && (
                <span className="inline-flex items-center text-amber-500">
                  <Target className="mr-2 h-4 w-4" />
                  Edge case missed. See suggested fix.
                </span>
              )}
              {!analyzing && result === null && (
                <span className="inline-flex items-center text-muted-foreground">
                  <Code className="mr-2 h-4 w-4" />
                  Ready to evaluate.
                </span>
              )}
            </div>

            <div className="flex gap-2">
              <Button variant="outline" className="group relative px-4 py-2 border-2 border-gray text-gray-300 hover:bg-neutral-950 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)]" onClick={onReset}>
                Reset
              </Button>
              <Button className="group relative px-4 py-2 border-2 border-gray text-gray-300 hover:bg-orange-700 hover:text-white shadow-[0_8px_30px_rgba(0,0,0,0.08)] after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:w-1/3 after:h-[2px] after:bg-gradient-to-r after:from-transparent after:via-white/70 after:to-transparent after:rounded-full after:blur-[2px] after:opacity-70 group-hover:after:opacity-100 after:transition" onClick={onRun} disabled={analyzing}>
                {analyzing ? (
                  <span className="inline-flex items-center">
                    <Clock className="mr-2 h-4 w-4 animate-pulse" />
                    Running…
                  </span>
                ) : (
                  <span className="inline-flex items-center">
                    <Zap className="mr-2 h-4 w-4" />
                    Run AI Test
                  </span>
                )}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card >
    </div >
  )
}

/* ---------- Skill Builder primitives ---------- */
function CodeAnimation() {
  const snippets = useMemo(
    () => [
      [
        "function throttle(fn, wait) {",
        "  let last = 0, timer;",
        "  return (...args) => {",
        "    const now = Date.now();",
        "    const remain = wait - (now - last);",
        "    if (remain <= 0) { last = now; fn(...args); }",
        "    else { clearTimeout(timer); timer = setTimeout(() => { last = Date.now(); fn(...args); }, remain); }",
        "  }",
        "}",
      ],
      [
        "function binarySearch(arr, x) {",
        "  let l = 0, r = arr.length - 1;",
        "  while (l <= r) {",
        "    const m = (l + r) >> 1;",
        "    if (arr[m] === x) return m;",
        "    if (arr[m] < x) l = m + 1; else r = m - 1;",
        "  }",
        "  return -1;",
        "}",
      ],
      [
        "function sanitize(input) {",
        "  const el = document.createElement('div');",
        "  el.innerText = String(input);",
        "  return el.innerHTML; // encode to avoid injection",
        "}",
        "sanitize(`<img src=x onerror=alert(1)>`)",
      ],
    ],
    [],
  )

  const [iSnippet, setISnippet] = useState(0)
  const full = useMemo(() => snippets[iSnippet].join("\n"), [snippets, iSnippet])
  const [count, setCount] = useState(0)

  useEffect(() => {
    const done = count >= full.length
    const delay = done ? 1200 : 18 + Math.random() * 18
    const t = setTimeout(() => {
      if (done) {
        setCount(0)
        setISnippet((i) => (i + 1) % snippets.length)
      } else {
        setCount((c) => c + 1)
      }
    }, delay)
    return () => clearTimeout(t)
  }, [count, full.length, snippets.length])

  const shown = full.slice(0, count)
  const lines = shown.split("\n")
  const ext = "ts"

  return (
    <Card className="overflow-hidden border-border/60 bg-card/70 backdrop-blur">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg">Live Coding Flow</CardTitle>
        <CardDescription>See how problems unfold—steady typing, sharp fixes, real patterns.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="rounded-lg border border-border/60 bg-gradient-to-b from-background/60 to-background">
          <div className="flex items-center gap-2 border-b border-border/60 px-3 py-2">
            <span className="inline-block size-2.5 rounded-full bg-red-400/90" />
            <span className="inline-block size-2.5 rounded-full bg-yellow-400/90" />
            <span className="inline-block size-2.5 rounded-full bg-green-400/90" />
            <span className="ml-2 text-xs text-muted-foreground">snippet.{ext}</span>
          </div>

          <div className="grid grid-cols-[auto_1fr] gap-x-3 px-3 py-3">
            <div className="select-none pr-1 text-right text-xs leading-6 text-muted-foreground/70">
              {Array.from({ length: Math.max(1, lines.length) }).map((_, i) => (
                <div key={i}>{i + 1}</div>
              ))}
            </div>
            <pre className="overflow-x-auto text-sm leading-6">
              <code className="font-mono">
                {lines.map((line, i) => (
                  <div key={i}>
                    {line}
                    {i === lines.length - 1 ? (
                      <span className="ml-0.5 inline-block h-4 w-[2px] animate-[caret_1.2s_steps(1)_infinite] align-baseline bg-gray-400" />
                    ) : null}
                  </div>
                ))}
              </code>
            </pre>
          </div>
        </div>

        <div className="mt-3 flex flex-wrap gap-2">
          <Badge variant="secondary">Real patterns</Badge>
          <Badge variant="secondary">Edge cases</Badge>
          <Badge variant="secondary">Clean fixes</Badge>
        </div>
      </CardContent>
    </Card>
  )
}

function SkillCard({
  icon,
  title,
  desc,
}: {
  icon: React.ReactNode
  title: string
  desc: string
}) {
  return (
    <Card className="border-border/60 bg-card/70 transition-all duration-300 hover:-translate-y-0.5 hover:border-gray-600/50">
      <CardHeader className="pb-2">
        <div className="mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-gray-900/40">{icon}</div>
        <CardTitle className="text-base">{title}</CardTitle>
        <CardDescription>{desc}</CardDescription>
      </CardHeader>
    </Card>
  )
}

/* ---------- Decorative utilities ---------- */
function GridBackground({ className = "" }: { className?: string }) {
  return (
    <div
      aria-hidden="true"
      className={`pointer-events-none absolute inset-0 ${className}`}
      style={{
        backgroundImage:
          "linear-gradient(to right, hsl(var(--border)/.35) 1px, transparent 1px), linear-gradient(to bottom, hsl(var(--border)/.35) 1px, transparent 1px)",
        backgroundSize: "40px 40px",
      }}
    />
  )
}

function CodeBackdrop({
  className = "",
  codeSet = "default",
}: {
  className?: string
  codeSet?: "default" | "mixed" | "binary" | "comments" | "snippets"
}) {
  const sets: Record<string, string[]> = {
    default: [
      "const sum = (a, b) => a + b;",
      "for (let i = 0; i < n; i++) { /* ... */ }",
      "def is_prime(n): return all(n % i for i in range(2, n))",
      "console.log('PrepioAI');",
      "if (arr?.length ?? 0) result.push(...arr)",
    ],
    mixed: [
      "type Result = 'pass' | 'fail'",
      "function normalize(s){return s.trim().toLowerCase()}",
      "let memo = new Map()",
      "class Graph { constructor(){ this.adj = {} } }",
      "SELECT * FROM results WHERE status = 'pass';",
    ],
    binary: ["01000110 01101001 01111000 01101111 01110010 01000001 01001001", "1101 1010 1111 0001 1010 0101 0110"],
    comments: ["// Great variable naming!", "// Consider time-space tradeoffs", "// Edge cases covered ✓", "// LGTM"],
    snippets: ["try { run() } catch (e) { handle(e) }", "assert.equal(output, expected)", "return true", "<Button />"],
  }
  const lines = sets[codeSet] || sets.default

  return (
    <div
      aria-hidden="true"
      className={`pointer-events-none absolute inset-0 -z-10 flex select-none items-center justify-center ${className}`}
    >
      <div className="w-full max-w-6xl px-4 opacity-100 [mask-image:radial-gradient(ellipse_at_center,white,transparent_70%)]">
        <div className="-rotate-1 font-mono text-xs leading-6 text-muted-foreground/80">
          {[...Array(10)].map((_, row) => (
            <div key={row} className="flex flex-wrap gap-x-6 gap-y-2 opacity-70">
              {lines.map((l, i) => (
                <span key={`${row}-${i}`} className="whitespace-pre text-muted-foreground/30">
                  {l}
                </span>
              ))}
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

function Orb({ className = "" }: { className?: string }) {
  return (
    <div
      aria-hidden="true"
      className={`pointer-events-none absolute -z-10 rounded-full bg-[radial-gradient(closest-side,theme(colors.primary/22),transparent_70%)] blur-2xl ${className}`}
    />
  )
}

function Chip({
  children,
  className = "",
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <div
      aria-hidden="true"
      className={`pointer-events-none absolute z-[1] inline-flex items-center rounded-full border border-border/60 bg-card/70 px-3 py-1 text-xs text-muted-foreground backdrop-blur ${className}`}
    >
      <code className="font-mono">{children}</code>
    </div>
  )
}

function TrustPill({
  children,
  icon,
}: {
  children: React.ReactNode
  icon?: React.ReactNode
}) {
  return (
    <div className="inline-flex items-center rounded-full border border-border/60 bg-card/60 px-3 py-1 text-xs text-muted-foreground backdrop-blur">
      {icon}
      {children}
    </div>
  )
}

/* ---------- Content primitives ---------- */
function SectionHeading({
  eyebrow,
  title,
  subtitle,
}: {
  eyebrow?: string
  title: string
  subtitle?: string
}) {
  return (
    <div className="mx-auto mb-12 max-w-3xl text-center">
      {eyebrow ? (
        <div className="mb-3 inline-flex items-center rounded-full border border-border/60 bg-card/70 px-3 py-1 text-xs text-gray-400">
          {eyebrow}
        </div>
      ) : null}
      <h2 className="text-3xl font-bold md:text-4xl">{title}</h2>
      {subtitle ? <p className="mt-3 text-lg text-muted-foreground">{subtitle}</p> : null}
    </div>
  )
}

function TabSwitch({
  current,
  onChange,
  tabs,
}: {
  current: string
  onChange: (k: any) => void
  tabs: { key: any; label: string; icon: React.ComponentType<{ className?: string }> }[]
}) {
  return (
    <div className="inline-flex overflow-hidden rounded-lg border border-border/60 bg-card/70 p-1">
      {tabs.map((t) => {
        const Icon = t.icon
        const active = current === t.key
        return (
          <button
            key={t.key}
            aria-pressed={active}
            onClick={() => onChange(t.key)}
            className={`flex items-center gap-2 rounded-md px-4 py-2 text-sm transition-colors ${active ? "bg-gray-900/40 text-foreground" : "text-muted-foreground hover:bg-muted/30"
              }`}
          >
            <Icon className="h-4 w-4 text-primary" />
            {t.label}
          </button>
        )
      })}
    </div>
  )
}

function TimelineItem({
  title,
  subtitle,
  right,
}: {
  title: string
  subtitle: string
  right?: string
}) {
  return (
    <div className="relative grid grid-cols-[1fr_auto] gap-2 rounded-xl border border-border/60 bg-card/60 p-4">
      <div>
        <div className="text-base font-semibold">{title}</div>
        <div className="text-sm text-muted-foreground">{subtitle}</div>
      </div>
      <div className="text-xs text-primary/80">{right}</div>
    </div>
  )
}

/* ---------- Hero Enhancements (NEW) ---------- */
function HeroSpotlight() {
  return <div aria-hidden="true" className="hero-spotlight" />
}

function Scanline() {
  return <div aria-hidden="true" className="scanline" />
}

function CodeIconField({
  count = 26,
}: {
  count?: number
}) {
  // Ensure stable layout of icons across renders
  const palette = "text-primary/25"
  const icons = useMemo(
    () => [
      Code2,
      TerminalSquare,
      Braces,
      Bug,
      Cpu,
      GitBranch,
      Database,
      Gauge,
      Shield,
      CircuitBoard,
      Sparkles,
      Terminal,
    ],
    [],
  )

  const items = useMemo(() => {
    const arr = []
    for (let i = 0; i < count; i++) {
      const Icon = icons[i % icons.length]
      // distribute across the hero area with margins so they don’t clash with content too much
      const left = 5 + ((i * 47) % 90) // pseudo-random spacing
      const top = 6 + ((i * 31) % 70)
      const size = 14 + ((i * 13) % 10) // 14-23px
      const delay = (i * 233) % 4000 // ms
      const duration = 4000 + ((i * 521) % 3500) // ms
      const rot = ((i * 37) % 40) - 20 // -20..20deg
      const op = 0.28 + ((i * 17) % 10) / 100 // 0.28-0.38
      arr.push({ Icon, left, top, size, delay, duration, rot, op })
    }
    return arr
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [count])

  return (
    <div aria-hidden="true" className="pointer-events-none absolute inset-0 -z-0">
      {items.map((it, idx) => (
        <div
          key={idx}
          className="absolute"
          style={
            {
              left: `${it.left}%`,
              top: `${it.top}%`,
              // wrapper drifts on X
              animation: `driftX ${it.duration}ms ease-in-out ${it.delay}ms infinite alternate`,
              // set rotation via CSS var to preserve with drift
              // @ts-ignore
              "--rot": `${it.rot}deg`,
            } as React.CSSProperties
          }
        >
          <div
            // inner floats on Y and twinkles
            style={{
              animation: `floatY ${Math.round(it.duration * 0.9)}ms ease-in-out ${Math.round(
                it.delay * 0.8,
              )}ms infinite alternate, twinkle ${it.duration + 1200}ms ease-in-out ${it.delay}ms infinite`,
              opacity: it.op,
              filter: "drop-shadow(0 0 8px rgba(59,130,246,0.25))",
            }}
          >
            <it.Icon className={`${palette}`} style={{ width: it.size, height: it.size }} />
          </div>
        </div>
      ))}
    </div>
  )
}
